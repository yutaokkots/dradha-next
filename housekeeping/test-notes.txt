Notes for testing

Queries:
https://testing-library.com/docs/queries/about

Based on the Guiding Principles, your test should resemble how users interact with your code (component, page, etc.) as much as possible. With this in mind, we recommend this order of priority:

1) Queries Accessible to Everyone Queries that reflect the experience of visual/mouse users as well as those that use assistive technology.
    a) getByRole: This can be used to query every element that is exposed in the accessibility tree. With the name option you can filter the returned elements by their accessible name. This should be your top preference for just about everything. There's not much you can't get with this (if you can't, it's possible your UI is inaccessible). Most often, this will be used with the name option like so: getByRole('button', {name: /submit/i}). Check the list of roles.
    b) getByLabelText: This method is used for form fields. When navigating through a website form, users find elements using label text. This method emulates that behavior, so it should be your top preference.
    c) getByPlaceholderText: A placeholder is not a substitute for a label. But if that's all you have, then it's better than alternatives.
    d) getByText: Outside of forms, text content is the main way users find elements. This method can be used to find non-interactive elements (like divs, spans, and paragraphs).
    e) getByDisplayValue: The current value of a form element can be useful when navigating a page with filled-in values.
2) Semantic Queries HTML5 and ARIA compliant selectors. Note that the user experience of interacting with these attributes varies greatly across browsers and assistive technology.
    a) getByAltText: If your element is one which supports alt text (img, area, input, and any custom element), then you can use this to find that element.
    b) getByTitle: The title attribute is not consistently read by screenreaders, and is not visible by default for sighted users
3) Test IDs
    a) getByTestId: The user cannot see (or hear) these, so this is only recommended for cases where you can't match by role or text or it doesn't make sense (e.g. the text is dynamic).

Examples:

a) getByRole:               <button role="button">Submit</button>
                                getByRole('button', { name: /submit/i });    
b) getByLabelText:          <label htmlFor="username">Username</label>
                            <input id="username" type="text" />
                                getByLabelText('Username');     
c) getByPlaceholderText:    <input type="text" placeholder="Enter your username" />
                                getByPlaceholderText('Enter your username');
d) getByText:               <p>Welcome to our website</p>
                                getByText('Welcome to our website');
e) getByDisplayValue:       <input type="text" value="john.doe@example.com" />
                                getByDisplayValue('john.doe@example.com');
f) getByAltText:            <img src="cat.jpg" alt="A cute cat" />
                                getByAltText('A cute cat'); 
g) getByTitle:              <div title="Important Information">Content</div>
                                getByTitle('Important Information');
h) getByTestId:             <button data-testid="submit-button">Submit</button>
                                getByTestId('submit-button');
