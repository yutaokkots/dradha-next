
src/redux/
.
├── features
│   ├── counterSlice.ts
│   ├── userSlice.ts
│   └── <...otherSliceFiles.ts>
├── hooks.ts
├── provider.tsx
└── store.ts

 ** Store
    A store is a container that holds the state of an application. It provides methods to update and subscribe to changes in the state. It serves as a single source of truth for the state of an application.
    -> store.ts aggregates the reducers (function that changes the state) and states from the slice files. 
 ** Reducer
    A reducer is a pure function that specifies how the application's state changes in response to actions sent to the store. It takes the current state and an action as arguments and returns the next state of the application. Reducers are combined to form the overall state oin an application.
    -> reducers are declared in the slice files, and aggregated in 'store.ts', which are used by the App. 
 ** Provider
    The Provider is a wrapper to provide the Redux store to its child components using the React-Redux Provider.
    -> provider.ts includes a wrapper for the 'layout.tsx' file in src/app/layout.tsx. 
 ** Hooks
    Hooks are functions that allow:
    -- interaction with the Redux store and access to its state -> store.getState()
    -- dispatching an action -> store.dispatch(action)
 ** Slice
    A slice is a collection of reducer logic and actions for a single feature in an application. It is a way to organize the Redux store by grouping together the reducer function and the action creators that belong to a specific part of the application state. Each slice file can be thought of as a specific piece of state in an application, and they are typically located within the “features” directory in the “redux” folder.


https://codevoweb.com/setup-redux-toolkit-in-nextjs-13-app-directory/


########################################### 
########## REDUX & REDUX TOOLKIT ########## 
########################################### 

redux-toolkit
package here: https://www.npmjs.com/package/@reduxjs/toolkit

##############################
###### 'configureStore'
###############
Redux Toolkit's 'configureStore' is called in redux/store.ts to help set up the states in the application.

Legacy Redux usage patterns typically required several dozen lines of copy-pasted boilerplate. 
These patterns included:
 - Combining the slice reducers into the root reducer.
 - Creating the middleware enhancer, usually with the thunk middleware or other side effects middleware, as well as middleware that might be used for development checks.
 - Adding the Redux DevTools enhancer, and composing the enhancers together.
 - Calling 'createStore'.

Redux Toolkit's 'configureStore' simplifies that setup process. 
One call to 'configureStore' will:
 - Call 'combineReducers' to combine your slices reducers into the root reducer function.
 - Add the thunk middleware called 'applyMiddleware'.
 - In development, automatically add more middleware to check for common mistakes, like accidentally mutating the state.
 - Automatically set up the Redux DevTools Extension connection.
 - Call 'createStore' to create a Redux store using that root reducer and those configuration options.

(Source: https://redux-toolkit.js.org/api/configureStore)

##############################
########### Slice
###############
>>>>>> Parameters for createSlice

    const createSlice = ({
        name: string,               // name: A name, used in action types
        initialState: any,          // initialStae: The initial state for the reducer
        reducers: Object<string, ReducerFunction | ReducerAndPrepareObject>
                                    // reducers: An object of "case reducers". 
                                    //      Key names will be used to generate actions.
        extraReducers?:
        | Object<string, ReducerFunction>
        | ((builder: ActionReducerMapBuilder<State>) => void)
                                    // extraReducers?: A "builder callback" function used to add more reducers, or
                                    //      an additional object of "case reducers", where the keys should be other
                                    //      action types
    })

import { createSlice, PayloadAction } from "@reduxjs/toolkit";

>>>>>> Use with typescript
Each slice file should define a type for its initial state value, so that createSlice can correctly infer the type of state in each case reducer.
    Example: 
        // Define a type for the slice state
        interface CounterState {
            value: number
        }
        // Define the initial state using that type
        const initialState: CounterState = {
            value: 0,
        }

>>>>>> PayloadAction
An 'action' in Redux is an object that describes a change in the state of the application. 
The 'payload' is the piece of data that contains information about the change.

PayloadAction is a type provided by Redux Toolkit. 

PayloadAction is used to define action creators within a slice. 
PayloadAction is a generic type, and the type of the payload can be specified. 
The PayloadAction type includes a 'payload' property that corresponds to the 'payload' of the action.
All generated actions should be defined using the PayloadAction<T> type from Redux Toolkit.

    Example, contd:
        export const counterSlice = createSlice({
            name: 'counter',
            initialState,
            reducers: {
                increment: (state) => {
                    state.value += 1
                },
                decrement: (state) => {
                    state.value -= 1
                },
                // Use the PayloadAction type to declare the contents of `action.payload`
                incrementByAmount: (state, action: PayloadAction<number>) => {
                    state.value += action.payload
                },
            },
        })

>>>>>> createAsyncThunk
createAsyncThunk is a utility function provided by Redux Toolkit.
createAsyncThunk simplifies the process of handling asynchronous logic in Redux actions. 
It is often used in conjunction with createSlice to define asynchronous actions. 

##############################
########### Hooks
###############

Hooks are functions that allow 
 -- interaction with the Redux store and access to its state -> store.getState()
 -- dispatching an action -> store.dispatch(action)

store.dispatch(action) is the only way to trigger a state change. 

import { useAppDispatch, useAppSelector } from "../redux/hooks";

>>>>>> useAppDispatch
useAppSelector accesses a state.

>>>>>> useAppSelector
useAppDispatch dispatches actions and modify a state.

##############################
########### Thunks
###############

A thunk is an asynchronous function that can be dispatched to the Redux store. 
Thunks are typically used to perform asynchronous operations and dispatch one or more actions based on the outcome of those operations.